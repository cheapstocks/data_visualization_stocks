{"version":3,"sources":["utils.tsx","index.tsx","Dividends.tsx","HistoricalPrice.tsx"],"names":["URL","window","location","origin","download_data","market","ticker","path","fetch","method","then","response","json","data","catch","error","console","get_info","log","render","exact","component","useState","setData","currency","setCurrency","params","useParams","useEffect","id","dividends","item","d","Date","push","x","toLocaleDateString","y","Dividends","style","width","height","ResponsiveContainer","LineChart","margin","top","right","left","bottom","XAxis","dataKey","YAxis","tickFormatter","Tooltip","Legend","Line","type","name","stroke","dot","prices","Close","document","getElementById"],"mappings":"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","file":"static/js/main.2aa40de8.chunk.js","sourcesContent":["import { DividendsEntity, HistoricalPriceEntity, Info } from \"./models\";\n\nconst URL = window.location.origin\nconst DIVIDENDS = \"dividends\"\nconst INFO = \"info\"\nconst PRICES = \"prices\"\n\nfunction download_data(market: string, ticker: string, path: string) {\n\n  return fetch(`${URL}/data/${market}/${path}/${ticker}.json`, {\n    method: 'GET',\n  })\n    .then(response => response.json())\n    .then(data => {\n      return data\n    })\n    .catch((error) => {\n      console.error('Error:', error);\n    });\n}\n\nexport function get_dividends(market: string, ticker: string): Promise<void | DividendsEntity[] | null | undefined> {\n  return download_data(market, ticker, DIVIDENDS)\n    .then(response => {\n      if (response != null) {\n        return response\n      }\n    })\n    .catch(error => {\n      console.log(error)\n    })\n}\n\nexport function get_historical_price(market: string, ticker: string): Promise<void | HistoricalPriceEntity[] | null | undefined> {\n  return download_data(market, ticker, PRICES)\n    .then(response => {\n      if (response != null) {\n        return response\n      }\n    })\n    .catch(error => {\n      console.log(error)\n    })\n}\n\nexport function get_info(market: string, ticker: string): Promise<void | Info | null | undefined> {\n  return download_data(market, ticker, INFO)\n    .then(response => {\n      if (response != null) {\n        return response\n      }\n    })\n    .catch(error => {\n      console.log(error)\n    })\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport DividensChart from './Dividends';\nimport HistoricalPrice from './HistoricalPrice';\n\nimport { HashRouter as Router, Switch, Route, } from \"react-router-dom\";\n\nrender(\n  <Router >\n    <Switch>\n      <Route exact path=\"/dividends/:market/:id\" component={DividensChart} />\n      <Route exact path=\"/price/:market/:id\" component={HistoricalPrice} />\n    </Switch>\n  </Router>,\n  document.getElementById('root'),\n);","import React, { useState, useEffect } from 'react';\nimport { DividendsEntity, Info } from \"./models\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { get_dividends, get_info } from './utils';\nimport { useParams } from 'react-router-dom';\n\nexport default function DividensChart() {\n  const [data, setData] = useState<{ x: string, y: number }[]>([]);\n  const [currency, setCurrency] = useState<string>(\"$\");\n  const params: { market: string, id: string } = useParams()\n\n  useEffect(() => {\n    get_dividends(params.market, params.id).then(response => {\n      let dividends = response as DividendsEntity[]\n      var data = []\n      // convert date\n      for (let item of dividends) {\n        let d = new Date(item.Date)\n        data.push({\n          x: d.toLocaleDateString(),\n          y: item.Dividends,\n        })\n      }\n      setData(data)\n    })\n    get_info(params.market, params.id).then(response => {\n      let info = response as Info\n      setCurrency(info.currency)\n    })\n  }, [params.id, params.market])\n\n\n  return (\n    <div style={{ width: 800, height: 600 }}>\n      <ResponsiveContainer>\n        <LineChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          }}\n        >\n          <XAxis dataKey=\"x\" />\n          <YAxis tickFormatter={d => `${currency} ${d}`} />\n          <Tooltip />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"y\"\n            name=\"Dividends\"\n            stroke=\"#8884d8\"\n            dot={false}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { HistoricalPriceEntity, Info } from \"./models\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { get_historical_price, get_info } from './utils';\nimport { useParams } from 'react-router-dom';\n\nexport default function HistoricalPrice() {\n  const [data, setData] = useState<{ x: string, y: number }[]>([]);\n  const [currency, setCurrency] = useState<string>(\"$\");\n  const params = useParams<{ id: string, market: string }>();\n\n  useEffect(() => {\n    get_historical_price(params.market, params.id).then(response => {\n      let prices = response as HistoricalPriceEntity[]\n      var data = []\n      // convert date\n      for (let item of prices) {\n        let d = new Date(item.Date)\n        data.push({\n          x: d.toLocaleDateString(),\n          y: item.Close,\n        })\n      }\n      setData(data)\n    })\n\n    get_info(params.market, params.id).then(response => {\n      let info = response as Info\n      setCurrency(info.currency)\n    })\n  }, [params.id, params.market])\n\n  return (\n    <div style={{ width: 800, height: 600 }}>\n      <ResponsiveContainer>\n        <LineChart\n          width={800}\n          height={600}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          }}\n        >\n          <XAxis dataKey=\"x\" />\n          <YAxis tickFormatter={d => `${currency} ${d}`} />\n          <Tooltip />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"y\"\n            name=\"Historical Price\"\n            stroke=\"#8884d8\"\n            dot={false}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}"],"sourceRoot":""}