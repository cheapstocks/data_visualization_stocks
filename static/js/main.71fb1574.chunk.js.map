{"version":3,"sources":["Dividends.tsx","index.tsx"],"names":["curveTypes","Object","keys","allCurves","series","Array","fill","map","_","i","generateDateValue","sort","a","b","date","getTime","allData","reduce","rec","d","concat","getX","getY","value","xScale","scaleTime","domain","extent","yScale","scaleLinear","max","Example","width","height","showControls","useState","curveType","setCurveType","showPoints","setShowPoints","svgHeight","lineHeight","range","className","onChange","e","target","curve","type","checked","id","stroke","size","strokeWidth","markerUnits","strokeOpacity","refX","rx","ry","lineData","even","markerStart","markerEnd","Group","top","left","j","r","cx","cy","LinePath","data","x","y","shapeRendering","markerMid","jsx","render","document","getElementById"],"mappings":"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","file":"static/js/main.71fb1574.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { extent, max } from 'd3-array';\nimport * as allCurves from '@visx/curve';\nimport { Group } from '@visx/group';\nimport { LinePath } from '@visx/shape';\nimport { scaleTime, scaleLinear } from '@visx/scale';\nimport { MarkerArrow, MarkerCross, MarkerX, MarkerCircle, MarkerLine } from '@visx/marker';\nimport generateDateValue, { DateValue } from '@visx/mock-data/lib/generators/genDateValue';\n\ntype CurveType = keyof typeof allCurves;\n\nconst curveTypes = Object.keys(allCurves);\nconst lineCount = 5;\nconst series = new Array(lineCount).fill(null).map((_, i) =>\n  // vary each series value deterministically\n  generateDateValue(25, /* seed= */ i / 72).sort(\n    (a: DateValue, b: DateValue) => a.date.getTime() - b.date.getTime(),\n  ),\n);\nconst allData = series.reduce((rec, d) => rec.concat(d), []);\n\n// data accessors\nconst getX = (d: DateValue) => d.date;\nconst getY = (d: DateValue) => d.value;\n\n// scales\nconst xScale = scaleTime<number>({\n  domain: extent(allData, getX) as [Date, Date],\n});\nconst yScale = scaleLinear<number>({\n  domain: [0, max(allData, getY) as number],\n});\n\nexport type CurveProps = {\n  width: number;\n  height: number;\n  showControls?: boolean;\n};\n\nexport default function Example({ width, height, showControls = true }: CurveProps) {\n  const [curveType, setCurveType] = useState<CurveType>('curveNatural');\n  const [showPoints, setShowPoints] = useState<boolean>(true);\n  const svgHeight = showControls ? height - 40 : height;\n  const lineHeight = svgHeight / lineCount;\n\n  // update scale output ranges\n  xScale.range([0, width - 50]);\n  yScale.range([lineHeight - 2, 0]);\n\n  return (\n    <div className=\"visx-curves-demo\">\n      {showControls && (\n        <>\n          <label>\n            Curve type &nbsp;\n            <select onChange={e => setCurveType(e.target.value as CurveType)} value={curveType}>\n              {curveTypes.map(curve => (\n                <option key={curve} value={curve}>\n                  {curve}\n                </option>\n              ))}\n            </select>\n          </label>\n          &nbsp;\n          <label>\n            Show points&nbsp;\n            <input\n              type=\"checkbox\"\n              checked={showPoints}\n              onChange={() => setShowPoints(!showPoints)}\n            />\n          </label>\n          <br />\n        </>\n      )}\n      <svg width={width} height={svgHeight}>\n        <MarkerX\n          id=\"marker-x\"\n          stroke=\"#333\"\n          size={22}\n          strokeWidth={4}\n          markerUnits=\"userSpaceOnUse\"\n        />\n        <MarkerCross\n          id=\"marker-cross\"\n          stroke=\"#333\"\n          size={22}\n          strokeWidth={4}\n          strokeOpacity={0.6}\n          markerUnits=\"userSpaceOnUse\"\n        />\n        <MarkerCircle id=\"marker-circle\" fill=\"#333\" size={2} refX={2} />\n        <MarkerArrow id=\"marker-arrow-odd\" stroke=\"#333\" size={8} strokeWidth={1} />\n        <MarkerLine id=\"marker-line\" fill=\"#333\" size={16} strokeWidth={1} />\n        <MarkerArrow id=\"marker-arrow\" fill=\"#333\" refX={2} size={6} />\n        <rect width={width} height={svgHeight} fill=\"#efefef\" rx={14} ry={14} />\n        {width > 8 &&\n          series.map((lineData, i) => {\n            const even = i % 2 === 0;\n            let markerStart = even ? 'url(#marker-cross)' : 'url(#marker-x)';\n            if (i === 1) markerStart = 'url(#marker-line)';\n            const markerEnd = even ? 'url(#marker-arrow)' : 'url(#marker-arrow-odd)';\n            return (\n              <Group key={`lines-${i}`} top={i * lineHeight} left={13}>\n                {showPoints &&\n                  lineData.map((d, j) => (\n                    <circle\n                      key={i + j}\n                      r={3}\n                      cx={xScale(getX(d))}\n                      cy={yScale(getY(d))}\n                      stroke=\"rgba(33,33,33,0.5)\"\n                      fill=\"transparent\"\n                    />\n                  ))}\n                <LinePath<DateValue>\n                  curve={allCurves[curveType]}\n                  data={lineData}\n                  x={d => xScale(getX(d)) ?? 0}\n                  y={d => yScale(getY(d)) ?? 0}\n                  stroke=\"#333\"\n                  strokeWidth={even ? 2 : 1}\n                  strokeOpacity={even ? 0.6 : 1}\n                  shapeRendering=\"geometricPrecision\"\n                  markerMid=\"url(#marker-circle)\"\n                  markerStart={markerStart}\n                  markerEnd={markerEnd}\n                />\n              </Group>\n            );\n          })}\n      </svg>\n      <style jsx>{`\n        .visx-curves-demo label {\n          font-size: 12px;\n        }\n      `}</style>\n    </div>\n  );\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport ParentSize from '@visx/responsive/lib/components/ParentSize';\n\nimport Dividends from './Dividends';\nimport './sandbox-styles.css';\n\nrender(\n  <ParentSize>{({ width, height }) => <Dividends width={width} height={height} />}</ParentSize>,\n  document.getElementById('root'),\n);"],"sourceRoot":""}