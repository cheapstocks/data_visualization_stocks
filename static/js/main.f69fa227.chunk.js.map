{"version":3,"sources":["Dividends.tsx","utils.tsx","HistoricalPrice.tsx","index.tsx"],"names":["URL","window","location","origin","get_dividends","market","ticker","fetch","method","then","response","json","data","catch","error","console","download_data","dividends","log","DividensChart","useState","setData","params","useParams","useEffect","id","resp","item","d","Date","push","x","toLocaleDateString","y","Dividends","XYChart","height","xScale","type","yScale","Text","verticalAnchor","AnimatedAxis","orientation","tickFormat","AnimatedGrid","columns","numTicks","AnimatedLineSeries","dataKey","xAccessor","yAccessor","HistoricalPrice","historical_price","Close","render","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.f69fa227.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { StockInfo, DividendsEntity } from \"./models\";\nimport {Text} from '@visx/text';\nimport {\n  AnimatedAxis,\n  AnimatedGrid,\n  AnimatedLineSeries,\n  XYChart,\n} from '@visx/xychart';\n\nconst URL = window.location.origin\n\nfunction download_data(market: string, ticker: string): Promise<void | StockInfo> {\n\n  return fetch(`${URL}/data/${market}/${ticker}.json`, {\n    method: 'GET',\n  })\n    .then(response => response.json())\n    .then(data => {\n\n      return data as StockInfo\n    })\n    .catch((error) => {\n      console.error('Error:', error);\n    });\n}\n\nfunction get_dividends(market: string, ticker: string): Promise<void | DividendsEntity[] | null | undefined> {\n  return download_data(market, ticker)\n    .then(response => {\n      if (response != null) {\n        return response.dividends\n      }\n    })\n    .catch(error => {\n      console.log(error)\n    })\n}\n\nconst DividensChart: React.FunctionComponent = () => {\n  const [data, setData] = useState<{ x: string, y: number }[]>([]);\n  const params = useParams<{ id: string, market: string }>();\n\n  useEffect(() => {\n    get_dividends(params.market, params.id).then(response => {\n      let resp = response as DividendsEntity[]\n      var data = []\n      // convert date\n      for (let item of resp) {\n        let d = new Date(item.Date)\n        data.push({\n          x: d.toLocaleDateString(),\n          y: item.Dividends,\n        })\n      }\n      setData(data)\n    })\n  })\n\n  const accessors = {\n    xAccessor: (d: { x: string, y: number }) => d.x,\n    yAccessor: (d: { x: string, y: number }) => d.y,\n  };\n  return (\n    <XYChart height={300} xScale={{ type: 'band' }} yScale={{ type: 'linear' }}>\n      <Text verticalAnchor=\"start\">{params.id}</Text>\n      <AnimatedAxis orientation=\"bottom\" />\n      <AnimatedAxis\n        orientation=\"left\"\n        tickFormat={d => `$${d}`} />\n\n      <AnimatedGrid columns={false} numTicks={3} />\n      <AnimatedLineSeries dataKey=\"Line 1\" data={data} {...accessors} />\n    </XYChart>\n  );\n\n  // TODO: Add tooltip\n  /*\n   <Tooltip\n      snapTooltipToDatumX\n      snapTooltipToDatumY\n      showVerticalCrosshair\n      showSeriesGlyphs\n      renderTooltip={({ tooltipData, colorScale }) => (\n        <div>\n          <div style={{ color: colorScale?(tooltipData?.nearestDatum.key) }}>\n            {tooltipData.nearestDatum.key}\n          </div>\n          {accessors.xAccessor(tooltipData.nearestDatum.datum)}\n          {', '}\n          {accessors.yAccessor(tooltipData.nearestDatum.datum)}\n        </div>\n      )}\n    />\n\n  */\n}\n\nexport default DividensChart;","import { DividendsEntity, HistoricalPriceEntity, StockInfo } from \"./models\";\n\nconst URL = window.location.origin\n\nexport function download_data(market: string, ticker: string): Promise<void | StockInfo> {\n\n  return fetch(`${URL}/data/${market}/${ticker}.json`, {\n    method: 'GET',\n  })\n    .then(response => response.json())\n    .then(data => {\n\n      return data as StockInfo\n    })\n    .catch((error) => {\n      console.error('Error:', error);\n    });\n}\n\nexport function get_dividends(market: string, ticker: string): Promise<void | DividendsEntity[] | null | undefined> {\n  return download_data(market, ticker)\n    .then(response => {\n      if (response != null) {\n        return response.dividends\n      }\n    })\n    .catch(error => {\n      console.log(error)\n    })\n}\n\nexport function get_historical_price(market: string, ticker: string): Promise<void | HistoricalPriceEntity[] | null | undefined> {\n  return download_data(market, ticker)\n    .then(response => {\n      if (response != null) {\n        return response.historical_price\n      }\n    })\n    .catch(error => {\n      console.log(error)\n    })\n}","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { HistoricalPriceEntity } from \"./models\";\nimport {Text} from '@visx/text';\nimport {\n  AnimatedAxis,\n  AnimatedGrid,\n  AnimatedLineSeries,\n  XYChart,\n} from '@visx/xychart';\nimport { get_historical_price } from './utils';\n\nconst HistoricalPrice: React.FunctionComponent = () => {\n  const [data, setData] = useState<{ x: string, y: number }[]>([]);\n  const params = useParams<{ id: string, market: string }>();\n\n  useEffect(() => {\n    get_historical_price(params.market, params.id).then(response => {\n      let resp = response as HistoricalPriceEntity[]\n      var data = []\n      // convert date\n      for (let item of resp) {\n        let d = new Date(item.Date)\n        data.push({\n          x: d.toLocaleDateString(),\n          y: item.Close,\n        })\n      }\n      setData(data)\n    })\n  })\n\n  const accessors = {\n    xAccessor: (d: { x: string, y: number }) => d.x,\n    yAccessor: (d: { x: string, y: number }) => d.y,\n  };\n  return (\n    <XYChart height={300} xScale={{ type: 'band' }} yScale={{ type: 'linear' }}>\n      <Text verticalAnchor=\"start\">{params.id}</Text>\n      <AnimatedAxis orientation=\"bottom\" />\n      <AnimatedAxis\n        orientation=\"left\"\n        tickFormat={d => `$${d}`} />\n\n      <AnimatedGrid columns={false} numTicks={3} />\n      <AnimatedLineSeries dataKey=\"Line 1\" data={data} {...accessors} />\n    </XYChart>\n  );\n\n  // TODO: Add tooltip\n  /*\n   <Tooltip\n      snapTooltipToDatumX\n      snapTooltipToDatumY\n      showVerticalCrosshair\n      showSeriesGlyphs\n      renderTooltip={({ tooltipData, colorScale }) => (\n        <div>\n          <div style={{ color: colorScale?(tooltipData?.nearestDatum.key) }}>\n            {tooltipData.nearestDatum.key}\n          </div>\n          {accessors.xAccessor(tooltipData.nearestDatum.datum)}\n          {', '}\n          {accessors.yAccessor(tooltipData.nearestDatum.datum)}\n        </div>\n      )}\n    />\n\n  */\n}\n\nexport default HistoricalPrice;","import React from 'react';\nimport { render } from 'react-dom';\nimport DividensChart from './Dividends';\nimport HistoricalPrice from './HistoricalPrice';\n\nimport './sandbox-styles.css';\nimport { HashRouter as Router, Switch, Route, } from \"react-router-dom\";\n\nrender(\n  <Router >\n    <Switch>\n      <Route exact path=\"/dividends/:market/:id\" component={DividensChart} />\n      <Route exact path=\"/price/:market/:id\" component={HistoricalPrice} />\n    </Switch>\n  </Router>,\n  document.getElementById('root'),\n);"],"sourceRoot":""}